language: cpp

matrix:
  include:
    - env: os_build=android os_arch=arm android_api=16
    - env: os_build=android os_arch=arm64 android_api=21
    - env: os_build=android os_arch=x86 android_api=16
    - env: os_build=android os_arch=x86_64 android_api=21
    - env: os_build=linux os_arch=x86
    - env: os_build=linux os_arch=x86_64
    - env: os_build=linux os_arch=arm
    - env: os_build=linux os_arch=arm64
    - dist: trusty
      env: os_build=windows os_arch=x86
    - dist: trusty
      env: os_build=windows os_arch=x86_64
    - os: osx
      osx_image: xcode7.3
      env: os_build=macosx os_arch=x86_64

branches:
  only:
    - master

cache:
  directories:
    - $HOME/.gradle/caches/
    - $HOME/.gradle/wrapper/

before_install:
# boost: download and bootstrap
  - wget -O boost.zip http://pilotfiber.dl.sourceforge.net/project/boost/boost/1.62.0/boost_1_62_0.zip
  - unzip -qq boost.zip
  - cd boost_1_62_0
  - ./bootstrap.sh
  - cd ..
  - export BOOST_ROOT=$PWD/boost_1_62_0

# openssl: download
  - wget -O openssl.tar.gz https://www.openssl.org/source/openssl-1.1.0b.tar.gz
  - tar xzf openssl.tar.gz
  - export OPENSSL_SOURCE=$PWD/openssl-1.1.0b
  # fix source code
  - if [ $os_build != "macosx" ]; then
      find $OPENSSL_SOURCE/crypto/sha/asm/ | egrep "armv4.*.pl" | xargs sed -i 's/.comm.*OPENSSL_armcap_P,4,4/.comm    OPENSSL_armcap_P,4,4\n.hidden  OPENSSL_armcap_P/g';
      find $OPENSSL_SOURCE/crypto | egrep "arm64cpuid.pl|ghashv8-armx.pl|aesv8-armx.pl" | xargs sed -i 's/.arch.*crypto//g';
      sed -i 's/if defined(_WIN32_WINNT) && _WIN32_WINNT>=0x0333/if 0/g' $OPENSSL_SOURCE/crypto/cryptlib.c;
      sed -i 's/MessageBox.*//g' $OPENSSL_SOURCE/crypto/cryptlib.c;
    fi

# libtorrent: download and checkout revision
  - git clone https://github.com/arvidn/libtorrent
  - cd libtorrent
  - git checkout af2a9a875bfc896b9c53de814b1966d09a360748
  - cd ..
  - export LIBTORRENT_ROOT=$PWD/libtorrent

# android ndk: download and create toolchain
  - if [ $os_build == "android" ]; then
      wget -O android-ndk.zip https://dl.google.com/android/repository/android-ndk-r13-linux-x86_64.zip;
      echo "Extracting NDK...wait";
      unzip -qq android-ndk.zip;
      export NDK=$PWD/android-ndk-r13;
      $NDK/build/tools/make_standalone_toolchain.py --arch $os_arch --api $android_api --stl libc++ --install-dir android-toolchain;
      export ANDROID_TOOLCHAIN=$PWD/android-toolchain;
    fi
  - if [[ $os_build == "android" && $os_arch == "arm" && $android_api == "16" ]]; then
      echo "unsigned long int getauxval(unsigned long int type) __attribute__((weak));" > $PWD/android-toolchain/sysroot/usr/include/sys/auxv.h;
    fi

  - if [[ $os_build == "linux" || $os_build == "windows" ]]; then
      sudo add-apt-repository ppa:ubuntu-toolchain-r/test -y;
      sudo apt-get update -qq;
      sudo apt-get install -qq g++-5;
    fi

  - if [[ $os_build == "linux" && $os_arch == "x86" ]]; then
      sudo apt-get install -qq libc6-dev-i386;
      wget http://mirrors.kernel.org/ubuntu/pool/main/g/gcc-5/lib32gcc-5-dev_5.2.1-22ubuntu2_amd64.deb;
      sudo dpkg --force-all -i lib32gcc-5-dev_5.2.1-22ubuntu2_amd64.deb;
      wget http://mirrors.kernel.org/ubuntu/pool/main/g/gcc-5/lib32stdc++-5-dev_5.2.1-22ubuntu2_amd64.deb;
      sudo dpkg --force-all -i lib32stdc++-5-dev_5.2.1-22ubuntu2_amd64.deb;
    fi

# linux arm packages
  - if [[ $os_build == "linux" && $os_arch == "arm" ]]; then
      wget https://releases.linaro.org/components/toolchain/binaries/5.3-2016.02/arm-linux-gnueabihf/gcc-linaro-5.3-2016.02-x86_64_arm-linux-gnueabihf.tar.xz;
      tar xf gcc-linaro-5.3-2016.02-x86_64_arm-linux-gnueabihf.tar.xz;
      export PATH=${PWD}/gcc-linaro-5.3-2016.02-x86_64_arm-linux-gnueabihf/bin:${PATH};
    fi

# linux arm64 packages
  - if [[ $os_build == "linux" && $os_arch == "arm64" ]]; then
      wget https://releases.linaro.org/components/toolchain/binaries/5.3-2016.02/aarch64-linux-gnu/gcc-linaro-5.3-2016.02-x86_64_aarch64-linux-gnu.tar.xz;
      tar xf gcc-linaro-5.3-2016.02-x86_64_aarch64-linux-gnu.tar.xz;
      export PATH=${PWD}/gcc-linaro-5.3-2016.02-x86_64_aarch64-linux-gnu/bin:${PATH};
    fi

# linux cross compilation tools for windows development
# remove files related to libwinpthread dll
  - if [[ $os_build == "windows" ]]; then
      sudo apt-get install -qq mingw-w64;
      sudo add-apt-repository ppa:adrozdoff/mingw -y;
      sudo apt-get update -qq;
      sudo apt-get install -qq gcc-5-mingw-w64 g++-5-mingw-w64;
      sudo rm /usr/i686-w64-mingw32/lib/libwinpthread.dll.a;
      sudo rm /usr/i686-w64-mingw32/lib/libwinpthread-1.dll;
      sudo rm /usr/x86_64-w64-mingw32/lib/libwinpthread.dll.a;
      sudo rm /usr/x86_64-w64-mingw32/lib/libwinpthread-1.dll;
    fi

  - if [ $os_build == "macosx" ]; then brew update > /dev/null && brew install --quiet gradle; fi

# openssl
  - 'export OPENSSL_NO_OPTS="no-afalgeng no-asan no-async no-autoalginit no-autoerrinit no-bf no-blake2
        no-camellia no-capieng no-cast no-chacha no-cmac no-cms no-comp no-crypto-mdebug
        no-crypto-mdebug-backtrace no-ct no-deprecated no-des no-dgram no-dh no-dsa no-dso
        no-dtls no-dynamic-engine no-ec no-ec2m no-ecdh no-ecdsa no-ec_nistp_64_gcc_128 no-egd
        no-engine no-err no-filenames no-fuzz-libfuzzer no-fuzz-afl no-gost no-heartbeats no-hw no-idea no-makedepend
        no-md2 no-md4 no-mdc2 no-msan no-multiblock no-nextprotoneg no-ocb no-ocsp no-pic no-poly1305
        no-posix-io no-psk no-rc2 no-rc4 no-rc5 no-rdrand no-rfc3779 no-rmd160
        no-scrypt no-sctp no-seed no-shared no-sock no-srp no-srtp no-ssl
        no-ssl-trace no-static-engine no-stdio no-threads no-tls no-ts no-ubsan no-ui no-unit-test
        no-whirlpool no-weak-ssl-ciphers no-zlib no-zlib-dynamic
        no-ssl3 no-tls1 no-tls1_1 no-tls1_2 no-dtls1 no-dtls1_2"'
  # android-arm
  - if [[ $os_build == "android" && $os_arch == "arm" ]]; then
      export CC=$ANDROID_TOOLCHAIN/bin/arm-linux-androideabi-clang;
      export run_openssl_configure="./Configure linux-armv4 ${OPENSSL_NO_OPTS} -march=armv7-a -mfpu=neon -fPIC -fno-strict-aliasing --prefix=$OPENSSL_SOURCE/../openssl";
    fi
  # android-arm64
  - if [[ $os_build == "android" && $os_arch == "arm64" ]]; then
      export CC=$ANDROID_TOOLCHAIN/bin/aarch64-linux-android-clang;
      export run_openssl_configure="./Configure linux-aarch64 ${OPENSSL_NO_OPTS} -march=armv8-a+crypto -fPIC -fno-strict-aliasing --prefix=$OPENSSL_SOURCE/../openssl";
    fi
  # android-x86
  - if [[ $os_build == "android" && $os_arch == "x86" ]]; then
      export CC=$ANDROID_TOOLCHAIN/bin/i686-linux-android-clang;
      export run_openssl_configure="./Configure linux-elf ${OPENSSL_NO_OPTS} -fPIC -fno-strict-aliasing --prefix=$OPENSSL_SOURCE/../openssl";
    fi
  # android-x86_64
  - if [[ $os_build == "android" && $os_arch == "x86_64" ]]; then
      export CC=$ANDROID_TOOLCHAIN/bin/x86_64-linux-android-clang;
      export run_openssl_configure="./Configure linux-x86_64 ${OPENSSL_NO_OPTS} -fPIC -fno-strict-aliasing --prefix=$OPENSSL_SOURCE/../openssl";
    fi
  # linux-x86
  - if [[ $os_build == "linux" && $os_arch == "x86" ]]; then
      export run_openssl_configure="./Configure linux-elf ${OPENSSL_NO_OPTS} -fPIC -m32 --prefix=$OPENSSL_SOURCE/../openssl";
    fi
  # linux-x86_64
  - if [[ $os_build == "linux" && $os_arch == "x86_64" ]]; then
      export run_openssl_configure="./Configure linux-x86_64 ${OPENSSL_NO_OPTS} -fPIC --prefix=$OPENSSL_SOURCE/../openssl";
    fi
  # linux-arm
  - if [[ $os_build == "linux" && $os_arch == "arm" ]]; then
      export CC=arm-linux-gnueabihf-gcc;
      export run_openssl_configure="./Configure linux-armv4 ${OPENSSL_NO_OPTS} -fsigned-char -march=armv7-a -mfpu=neon -fPIC --prefix=$OPENSSL_SOURCE/../openssl";
    fi
  # linux-arm64
  - if [[ $os_build == "linux" && $os_arch == "arm64" ]]; then
      export CC=aarch64-linux-gnu-gcc;
      export run_openssl_configure="./Configure linux-aarch64 ${OPENSSL_NO_OPTS} -fsigned-char -march=armv8-a+crypto -fPIC --prefix=$OPENSSL_SOURCE/../openssl";
    fi
  # windows-x86
  - if [[ $os_build == "windows" && $os_arch == "x86" ]]; then
      export CC=i686-w64-mingw32-gcc-5;
      export run_openssl_configure="./Configure mingw ${OPENSSL_NO_OPTS} --prefix=$OPENSSL_SOURCE/../openssl";
    fi
  # windows-x86_64
  - if [[ $os_build == "windows" && $os_arch == "x86_64" ]]; then
      export CC=x86_64-w64-mingw32-gcc-5;
      export run_openssl_configure="./Configure mingw64 ${OPENSSL_NO_OPTS} --prefix=$OPENSSL_SOURCE/../openssl";
    fi
  # macosx
  - if [ $os_build == "macosx" ]; then
      export run_openssl_configure="./Configure darwin64-x86_64-cc ${OPENSSL_NO_OPTS} --prefix=$OPENSSL_SOURCE/../openssl";
    fi

# jlibtorrent
  # android-arm
  - if [[ $os_build == "android" && $os_arch == "arm" ]]; then
      export run_bjam="${BOOST_ROOT}/b2 --user-config=config/android-arm-config.jam variant=release toolset=clang-arm target-os=android location=bin/release/android/armeabi-v7a";
      export run_strip="${ANDROID_TOOLCHAIN}/bin/arm-linux-androideabi-strip --strip-unneeded -x bin/release/android/armeabi-v7a/libjlibtorrent.so";
      export run_readelf="${ANDROID_TOOLCHAIN}/bin/arm-linux-androideabi-readelf -d bin/release/android/armeabi-v7a/libjlibtorrent.so";
      export PATH=$ANDROID_TOOLCHAIN/arm-linux-androideabi/bin:$PATH;
    fi
  # android-arm64
  - if [[ $os_build == "android" && $os_arch == "arm64" ]]; then
      export run_bjam="${BOOST_ROOT}/b2 --user-config=config/android-arm64-config.jam variant=release toolset=clang-arm64 target-os=linux location=bin/release/android/arm64-v8a";
      export run_strip="${ANDROID_TOOLCHAIN}/bin/aarch64-linux-android-strip --strip-unneeded -x bin/release/android/arm64-v8a/libjlibtorrent.so";
      export run_readelf="${ANDROID_TOOLCHAIN}/bin/aarch64-linux-android-readelf -d bin/release/android/arm64-v8a/libjlibtorrent.so";
      export PATH=$ANDROID_TOOLCHAIN/aarch64-linux-android/bin:$PATH;
    fi
  # android-x86
  - if [[ $os_build == "android" && $os_arch == "x86" ]]; then
      export run_bjam="${BOOST_ROOT}/b2 --user-config=config/android-x86-config.jam variant=release toolset=clang-x86 target-os=linux location=bin/release/android/x86";
      export run_strip="${ANDROID_TOOLCHAIN}/bin/i686-linux-android-strip --strip-unneeded -x bin/release/android/x86/libjlibtorrent.so";
      export run_readelf="${ANDROID_TOOLCHAIN}/bin/i686-linux-android-readelf -d bin/release/android/x86/libjlibtorrent.so";
      export PATH=$ANDROID_TOOLCHAIN/i686-linux-android/bin:$PATH;
    fi
  # android-x86_64
  - if [[ $os_build == "android" && $os_arch == "x86_64" ]]; then
      export run_bjam="${BOOST_ROOT}/b2 --user-config=config/android-x86_64-config.jam variant=release toolset=clang-x86_64 target-os=linux location=bin/release/android/x86_64";
      export run_strip="${ANDROID_TOOLCHAIN}/bin/x86_64-linux-android-strip --strip-unneeded -x bin/release/android/x86_64/libjlibtorrent.so";
      export run_readelf="${ANDROID_TOOLCHAIN}/bin/x86_64-linux-android-readelf -d bin/release/android/x86_64/libjlibtorrent.so";
      export PATH=$ANDROID_TOOLCHAIN/x86_64-linux-android/bin:$PATH;
    fi
  # linux-x86
  - if [[ $os_build == "linux" && $os_arch == "x86" ]]; then
      export run_bjam="${BOOST_ROOT}/b2 --user-config=config/linux-x86-config.jam variant=release toolset=gcc-x86 target-os=linux location=bin/release/linux/x86";
      export run_strip="strip --strip-unneeded -x bin/release/linux/x86/libjlibtorrent.so";
      export run_readelf="readelf -d bin/release/linux/x86/libjlibtorrent.so";
    fi
  # linux-x86_64
  - if [[ $os_build == "linux" && $os_arch == "x86_64" ]]; then
      export run_bjam="${BOOST_ROOT}/b2 --user-config=config/linux-x86_64-config.jam variant=release toolset=gcc-x86_64 target-os=linux location=bin/release/linux/x86_64";
      export run_strip="strip --strip-unneeded -x bin/release/linux/x86_64/libjlibtorrent.so";
      export run_readelf="readelf -d bin/release/linux/x86_64/libjlibtorrent.so";
    fi
  # linux-arm
  - if [[ $os_build == "linux" && $os_arch == "arm" ]]; then
      export run_bjam="${BOOST_ROOT}/b2 --user-config=config/linux-arm-config.jam variant=release toolset=gcc-arm target-os=linux location=bin/release/linux/arm";
      export run_strip="arm-linux-gnueabihf-strip --strip-unneeded -x bin/release/linux/arm/libjlibtorrent.so";
      export run_readelf="arm-linux-gnueabihf-readelf -d bin/release/linux/arm/libjlibtorrent.so";
    fi
  # linux-arm64
  - if [[ $os_build == "linux" && $os_arch == "arm64" ]]; then
      export run_bjam="${BOOST_ROOT}/b2 --user-config=config/linux-arm64-config.jam variant=release toolset=gcc-arm64 target-os=linux location=bin/release/linux/arm64";
      export run_strip="aarch64-linux-gnu-strip --strip-unneeded -x bin/release/linux/arm64/libjlibtorrent.so";
      export run_readelf="aarch64-linux-gnu-readelf -d bin/release/linux/arm64/libjlibtorrent.so";
    fi
  # windows-x86
  - if [[ $os_build == "windows" && $os_arch == "x86" ]]; then
      sed -i 's/ JNICALL Java_com_frostwire/ JNICALL _Java_com_frostwire/g' libtorrent_jni.cpp;
      export run_bjam="${BOOST_ROOT}/b2 --user-config=config/windows-x86-config.jam variant=release toolset=gcc-x86 target-os=windows location=bin/release/windows/x86";
      export run_strip="i686-w64-mingw32-strip --strip-unneeded -x bin/release/windows/x86/libjlibtorrent.dll";
      export run_readelf="eval objdump -p bin/release/windows/x86/jlibtorrent.dll | grep DLL";
    fi
  # windows-x86_64
  - if [[ $os_build == "windows" && $os_arch == "x86_64" ]]; then
      export run_bjam="${BOOST_ROOT}/b2 --user-config=config/windows-x86_64-config.jam variant=release toolset=gcc-x86_64 target-os=windows location=bin/release/windows/x86_64";
      export run_strip="x86_64-w64-mingw32-strip --strip-unneeded -x bin/release/windows/x86_64/libjlibtorrent.dll";
      export run_readelf="eval objdump -p bin/release/windows/x86_64/jlibtorrent.dll | grep DLL";
    fi
  # macosx
  - if [ $os_build == "macosx" ]; then
      export run_bjam="${BOOST_ROOT}/b2 --user-config=config/macosx-x86_64-config.jam variant=release toolset=clang-x86_64 target-os=darwin location=bin/release/macosx/x86_64";
      export run_strip="strip -S -x bin/release/macosx/x86_64/libjlibtorrent.dylib";
      export run_readelf="otool -L bin/release/macosx/x86_64/libjlibtorrent.dylib";
    fi

script:

  - cd $OPENSSL_SOURCE
  - $run_openssl_configure
  - echo "Compiling openssl...(remove &> /dev/null to see output)"
  - make &> /dev/null
  - make install &> /dev/null
  - cd ..
  - export OPENSSL_ROOT=$PWD/openssl

  - cd swig
  - $run_bjam
  - $run_strip
  - if [[ $os_build == "windows" && $os_arch == "x86" ]]; then
      mv bin/release/windows/x86/libjlibtorrent.dll bin/release/windows/x86/jlibtorrent.dll;
    fi
  - if [[ $os_build == "windows" && $os_arch == "x86_64" ]]; then
      mv bin/release/windows/x86_64/libjlibtorrent.dll bin/release/windows/x86_64/jlibtorrent.dll;
    fi
  - $run_readelf
  - cd ..

# debug symbols
  - cd swig
  - if [[ $os_build == "android" && $os_arch == "arm" ]]; then
      ${BOOST_ROOT}/b2 --user-config=config/android-arm-config.jam variant=debug toolset=clang-arm target-os=android location=bin/debug/android/armeabi-v7a;
      cd bin/debug/android/armeabi-v7a;
      ${ANDROID_TOOLCHAIN}/bin/arm-linux-androideabi-objcopy --only-keep-debug libjlibtorrent.so libjlibtorrent.so.debug;
      ${ANDROID_TOOLCHAIN}/bin/arm-linux-androideabi-objcopy --strip-debug libjlibtorrent.so;
      ${ANDROID_TOOLCHAIN}/bin/arm-linux-androideabi-objcopy --add-gnu-debuglink=libjlibtorrent.so.debug libjlibtorrent.so;
      cd -;
    fi
  - if [[ $os_build == "linux" && $os_arch == "x86_64" ]]; then
      ${BOOST_ROOT}/b2 --user-config=config/linux-x86_64-config.jam variant=debug toolset=gcc-x86_64 target-os=linux location=bin/debug/linux/x86_64;
      cd bin/debug/linux/x86_64;
      objcopy --only-keep-debug libjlibtorrent.so libjlibtorrent.so.debug;
      objcopy --strip-debug libjlibtorrent.so;
      objcopy --add-gnu-debuglink=libjlibtorrent.so.debug libjlibtorrent.so;
      cd -;
    fi
  - if [ $os_build == "macosx" ]; then
      ${BOOST_ROOT}/b2 --user-config=config/macosx-x86_64-config.jam variant=debug toolset=clang-x86_64 target-os=darwin location=bin/debug/macosx/x86_64;
      cd bin/debug/macosx/x86_64;
      dsymutil -flat -o=libjlibtorrent.dylib.debug libjlibtorrent.dylib;
      cd -;
    fi
  - cd ..

before_deploy:
  - cd swig/bin
  - find . -type f | egrep -v '.*\.so$|.*\.dll$|.*\.dylib$|.*\.debug$' | xargs rm
  - find . -empty -type d | xargs rm -r
  - cd ../..

deploy:
  provider: releases
  skip_cleanup: true
  api_key:
    secure: Z3YJbwk9WigvlE/g0dY2aGC4TXOYQj0q5kqiovASikHf9BriJVwdE3d3tbjP90a+wOJjOqOkjw5MtDeQ/z/HwUr0WoP8GyoJXjbNjfk+DRy0SvViq+sxJ2Y0ToOunXrlxsJB0ui0goA1H+BZ8NW5+6kdQhh6hDo5UTMqZxeofMNwlrX7vATPHWfup6I3tSLY/CLiapyXyu0twkT6h0FqUFSdY6tqno5W0o9D50L3jTfo+Rh4pLA1TbwGIwhDUpYsKIo54hg7HQEQHVe3ec6i9klRywwegfSgfaD+XB/DDjM9FOG6Bl2mfhvXGxtX/wrZ66PFbWhI1ULCPN1Sy4q3JcPMMuBsYDuTFYHNsovngHI6oJfBkZnr3dzrA57AixYSEkzXTWvZtiwoDmwSAdIJzL+hzqSIIRvqJbjZ/ba/TYIp40XMrJDCcP+p8EeWdvxUZNh+Ga+TJynWiTLM37SHbo+cXa3ItOUVyb/C/PdkFGYnVUB+eTLlGv4RjHddo9wimWPb3yi/Xvi4bBfqhaUIXFozPOLCbZmnSWmSirc8syY0VecXdfqmg9+7COTzMZEzcEsz8VapjjcdMhkMSnqHmoGfTDTBZtaGNTFnpMG+QxBTOehhycaUjoO1hwx97ZseyMOxvbt/w/czFKPbXTgnHv+n8Rb58MABdgxIDGjaMBM=
  file: swig/bin/release/linux/arm/libjlibtorrent.so
  on:
    repo: gaivoronsky/frostwire-jlibtorrent
